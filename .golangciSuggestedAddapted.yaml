## Golden config for golangci-lint v1.43.0
#
# This is the best config for golangci-lint based on my experience and opinion.
# It is very strict, but not extremely strict.
# Feel free to adopt and change it for your needs.

run:
  timeout: 1m # default 1m
 
linters-settings:
  errcheck:
    check-type-assertions: true # default false
    check-blank: false # default false
    ignore: "fmt:.*" # default fmt:.*
    exclude-functions: [] # see https://github.com/kisielk/errcheck#excluding-functions for details # default []
  
  gosimple:
    go: "1.17" # default 1.13
    checks: [ "*" ] # https://staticcheck.io/docs/options#checks # default ["*"]
  
  govet:
    enable-all: true
    disable:
      - fieldalignment # too strict
    settings:
      shadow:
        strict: true # default false
  
  staticcheck:
    go: "1.17" # default 1.13
    checks: [ "*" ] # https://staticcheck.io/docs/options#checks # default ["*"]
  
  structcheck:
    exported-fields: false # default false
  
  unused:
    check-exported: false # default false # TODOs: enable after fixing false positives
  
  varcheck:
    exported-fields: false # default false # TODOs: enable after fixing false positives

  #cyclop:
  #  max-complexity: 30 # the maximal code complexity to report # default 10
  #  package-average: 10.0 # the maximal average package complexity. If it's higher than 0.0 (float) the check is enabled # default 0.0
  #  skip-tests: false # should ignore tests # default false
  
  dupl:
    threshold: 150 # default 150
  
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true # default true
    # Check for plain type assertions and type switches
    asserts: true # default true
    # Check for plain error comparisons
    comparison: true # default true
  
  exhaustive:
    check-generated: false # indicates whether to check switch statements in generated Go source files # default false
    default-signifies-exhaustive: false # if true, switch is considered exhaustive as long as a 'default' case is present # default false
    ignore-pattern: "" # enum members matching regexp (including import path) do not require a case clause to satisfy exhaustiveness # default ""
  
  #forbidigo:
  #  forbid: # forbid the following identifiers # default ^(fmt\.Print(|f|ln)|print|println)$
  #    - ^(fmt\.Print(|f|ln)|print|println)$
  #  exclude-godoc-examples: true # exclude godoc examples from forbidigo checks # default is true
  
  funlen:
    lines: 100 # default 60
    statements: 50 # default 40
  
  gocognit:
    min-complexity: 20 # minimal code complexity to report, 30 by default (but we recommend 10-20)
  
  goconst:
    match-constant: true # look for existing constants matching the values # default true
    min-len: 3 # minimal length of string constant # default 3
    min-occurrences: 3 # minimum occurrences of constant string count to trigger issue # default 3
    numbers: true # search also for duplicated numbers # default false
    min: 3 # minimum value, only works with goconst.numbers # default 3
    max: 3 # maximum value, only works with goconst.numbers # default 3
    ignore-calls: true # ignore when constant is not used as function argument # default true
    ignore-tests: false # ignore test files # default false
  
  gocritic:
    settings:
      captLocal:
        paramsOnly: false # whether to restrict checker to params only # default true
      elseif:
        skipBalanced: false # whether to skip balanced if-else pairs # default true
      #hugeParam: # disabled by default
      #  sizeThreshold: 80 # size in bytes that makes the warning trigger # default 80
      #nestingReduce: # disabled by default
      #  bodyWidth: 5 # min number of statements inside a branch to trigger a warning # default 5
      #rangeExprCopy: # disabled by default
      #  sizeThreshold: 512 # size in bytes that makes the warning trigger # default 512
      #  skipTestFuncs: true # whether to check test functions # default true
      #rangeValCopy: # disabled by default
      #  sizeThreshold: 128 # size in bytes that makes the warning trigger # default 128
      #  skipTestFuncs: true # whether to check test functions # default true
      #ruleguard: # disabled by default
      #  rules: "" # path to a gorules file # default ""
      #tooManyResultsChecker: # disabled by default
      #  maxResults: 5 # maximum number of results # default 5
      #truncateCmp: # disabled by default
      #  skipArchDependent: true # whether to skip int/uint/uintptr types # default true
      underef:
        skipRecvDeref: false # whether to skip (*x).method() calls where x is a pointer receiver # default true
      #unnamedResult: # disabled by default
      #  checkExported: false # whether to check exported functions # default false
  
  gocyclo:
    min-complexity: 30 # default 30
  
  #godot:
  #  scope: declarations # comments to be checked: `declarations` (default), `toplevel`, or `all`
  #  exclude: [] # list of regexps for excluding particular comment lines from check # default []
  #  capital: false # check that each sentence starts with a capital letter # default false
  
  gomnd:
    settings:
      mnd:
        # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
        checks: argument,case,condition,operation,return,assign # default argument,case,condition,operation,return,assign
        ignored-numbers: 0,1 # default 0,1
        # ignored-files: "_test.go" # default "_test.go" # don't use this setting because of bug inside gomnd
        ignored-functions: "time.Date" # default "time.Date"
  
  #gomoddirectives:
  #  replace-allow-list: [] # list of allowed `replace` directives # default []
  #  replace-local: false # allow local `replace` directives # default false
  #  exclude-forbidden: false # forbid the use of `exclude` directives # default false
  #  retract-allow-no-explanation: false # allow to use `retract` directives without explanation # default false
  
  #gomodguard:
  #  allowed:
  #    modules: [] # default []
  #    domains: [] # default []
  #  blocked:
  #    modules:
  #      - github.com/golang/protobuf:
  #          recommendations:
  #            - google.golang.org/protobuf
  #          reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
  #      - github.com/satori/go.uuid:
  #          recommendations:
  #            - github.com/google/uuid
  #          reason: "satori's package is not maintained"
  #      - github.com/gofrs/uuid:
  #          recommendations:
  #            - github.com/google/uuid
  #          reason: "see recommendation from dev-infra team: https://confluence.gtforge.com/x/gQI6Aw"
  #    versions: [] # default []
  #    local_replace_directives: true # default false
  
  lll:
    line-length: 120 # default 120
  
  #makezero:
  #  always: false # default false
  
  #maligned:
  #  suggest-new: true # default false
  
  #misspell:
  #  locale: us
  #  ignore-words: "" # default: ""
  
  nakedret:
    max-func-lines: 0 # default 30
  
  nestif:
    min-complexity: 4 # default 5
  
  nilnil:
    checked-types: # default [ptr, func, iface, map, chan]
      - ptr
      - func
      - iface
      - map
      - chan
  
  #nolintlint:
  #  allow-unused: false # default false
  #  allow-leading-space: true # default true
  #  allow-no-explanation: [funlen, gocognit, lll] # default []
  #  require-explanation: true # default false
  #  require-specific: true # default false
  
  prealloc:
    simple: false # default true
    range-loops: true # default true
    for-loops: false # default false
  
  #predeclared:
  #  ignore: "" # comma-separated list of predeclared identifiers to not report on # default ""
  #  q: false # include method names and field names (i.e., qualified names) in checks # default false
 
  #promlinter:
  #  # Promlinter cannot infer all metrics name in static analysis.
  #  # Enable strict mode will also include the errors caused by failing to parse the args.
  #  strict: false # default false
  #  # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
  #  disabled-linters:
  #  #  - "Help"
  #  #  - "MetricUnits"
  #  #  - "Counter"
  #  #  - "HistogramSummaryReserved"
  #  #  - "MetricTypeInName"
  #  #  - "ReservedChars"
  #  #  - "CamelCase"
  #  #  - "lintUnitAbbreviations"
  
  revive: # default rules are ignored if any of following settings is defined
    #ignore-generated-header: false # when set to false, ignores files with "GENERATED" header, similar to golint # default false
    #confidence: 0.3 # default failure confidence, this means that linting errors with less than X confidence will be ignored # default 0.8
    #severity: "warning" # minimal rule severity to fail {"error", "warning"} # default "warning"
    #enable-all-rules: false # default false
    # There is a list of default rules, but it can be redefined, see https://github.com/mgechev/revive#available-rules
    #rules:
    #  - name: "xxx"
    #    disabled: false
    #    arguments: []
    #    severity: "xxx"
    # allows to redefine rule severity (without changing default rules list)
    #directives:
    #  - name: "xxx"
    #    severity: "xxx"
  
  #rowserrcheck:
  #  packages:
  #    - database/sql
  #    - github.com/jmoiron/sqlx
  
  stylecheck:
    go: "1.17" # default 1.13
    checks: [ "*" ] # https://staticcheck.io/docs/options#checks # default ["*"]
    dot-import-whitelist: [] # https://staticcheck.io/docs/options#dot_import_whitelist  # default []
    initialisms: [ "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS" ] # https://staticcheck.io/docs/options#initialisms
    http-status-code-whitelist: [ "200", "400", "404", "500" ] # https://staticcheck.io/docs/options#http_status_code_whitelist
  
  #tenv:
  #  all: true # check all functions in _test.go, not only test functions # default false
  
  testpackage:
    skip-regexp: (export|internal)_test\.go # default (export|internal)_test\.go
  
  unparam:
    check-exported: true # default false
  
  #wrapcheck:
  #  ignoreSigs: [] # specifies substrings of signatures to ignore. Overrides default https://github.com/tomarrell/wrapcheck#configuration # default []
  #  ignoreSigRegexps: [] # this is similar to the ignoreSigs, but gives slightly more flexibility # default []
  #  ignorePackageGlobs: [] # see https://github.com/tomarrell/wrapcheck#configuration # default []
 
linters:
  disable-all: true
  enable:
    ## enabled by default
    - deadcode          # Finds unused code
    - errcheck          # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple          # Linter for Go source code that specializes in simplifying a code
    - govet             # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign       # Detects when assignments to existing variables are not used
    - staticcheck       # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck       # Finds unused struct fields
    - typecheck         # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused            # Checks Go code for unused constants, variables, functions and types
    - varcheck          # Finds unused global variables and constants
    ## disabled by default
#   - asciicheck        # Simple linter to check that your code does not contain non-ASCII identifiers
#   - bidichk           # Checks for dangerous unicode character sequences
    - bodyclose         # checks whether HTTP response body is closed successfully
#   - contextcheck      # check the function whether use a non-inherited context
#   - cyclop            # checks function and package cyclomatic complexity
#   - depguard          # Go linter that checks if package imports are in a list of acceptable packages
                            # replaced with gomodguard
#   - dogsled           # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
                            # is not used - сhecks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl              # Tool for code clone detection
#   - durationcheck     # check for two durations multiplied together
    - errname           # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint         # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive        # check exhaustiveness of enum switch statements
#   - exhaustivestruct  # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occations, where the check for the returned error can be omitted.
                            # too strict - finds structs that have uninitialized fields # TODOs: maybe enable for some packages?
    - exportloopref     # checks for pointers to enclosing loop variables
#   - forbidigo         # Forbids identifiers
#   - forcetypeassert   # finds forced type assertions
                            # errcheck is used instead
    - funlen            # Tool for detection of long functions
#   - gci               # (auto) Gci control golang package import order and make it always deterministic.
                            # is not used - sorts imports
#   - gochecknoglobals  # check that no global variables exist. This analyzer checks for global variables and errors on any found. A global variable is a variable declared in package scope and that can be read and written to by any function within the package. Global variables can cause side effects which are difficult to keep track of. A code in one function may change the variables state while another unrelated chunk of code may be effected by it.
#   - gochecknoinits    # Checks that no init functions are present in Go code	
    - gocognit          # Computes and checks the cognitive complexity of functions
    - goconst           # Finds repeated strings that could be replaced by a constant
    - gocritic          # Provides diagnostics that check for bugs, performance and style issues. Extensible without recompilation through dynamic rules. Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.
    - gocyclo           # Computes and checks the cyclomatic complexity of functions
#   - godot             # (auto) Check if comments end in a period
#   - godox             # Tool for detection of FIXMEs, TODOs and other comment keywords
                            # is not used - complains about TODOs in comments
#   - goerr113          # Golang linter to check the errors handling expressions
                            # too strict - checks the errors handling expressions
#   - gofmt             # (auto) Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
                            # replaced with goimports
#   - gofumpt           # (auto) Gofumpt checks whether code was gofumpt-ed.
                            # replaced with goimports, gofumports is not available yet
#   - goheader          # Checks is file header matches to pattern
                            # is not used - checks that each file has the licence at the beginning
    - goimports         # (auto) In addition to fixing imports, goimports also formats your code in the same style as gofmt.
#   - golint            # The repository of the linter has been archived by the owner. Replaced by revive.
                            # deprecated - revive is used instead
    - gomnd             # An analyzer to detect magic numbers.
#   - gomoddirectives   # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
#   - gomodguard        # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname  # Checks that printf-like functions are named with f at the end
    - gosec             # Inspects source code for security problems
#   - ifshort           # Checks that your code uses short syntax for if-statements whenever possible
                            # is not used - checks that your code uses short syntax for if-statements whenever possible
#   - importas          # Enforces consistent import aliases
                            # is not used - enforces consistent import aliases
#   - interfacer        # The repository of the linter has been archived by the owner.
                            # deprecated and has false positives
#   - ireturn           # Accept Interfaces, Return Concrete Types
                            # good, but too strict - accept interfaces, return concrete types
    - lll               # Reports long lines
#   - makezero          # Finds slice declarations with non-zero initial length
#   - maligned          # The repository of the linter has been archived by the owner. Replaced by govet 'fieldalignment'.
                            # deprecated
#   - misspell          # (auto) Finds commonly misspelled English words in comments
                            # useless - correct commonly misspelled English words... quickly
    - nakedret          # Finds naked returns in functions greater than a specified function length
    - nestif            # Reports deeply nested if statements
    - nilerr            # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil            # Checks that there is no simultaneous return of nil error and an invalid value.
#   - nlreturn          # nlreturn checks for a new line before return and branch statements to increase code clarity
                            # too strict - requires a new line before return and branch statements
    - noctx             # noctx finds sending http request without context.Context
#   - nolintlint        # Reports ill-formed or insufficient nolint directives
#   - paralleltest      # paralleltest detects missing usage of t.Parallel() method in your Go test
                            # too many false positives
    - prealloc          # Finds slice declarations that could potentially be preallocated
#   - predeclared       # find code that shadows one of Go's predeclared identifiers
#   - promlinter        # Check Prometheus metrics naming via promlint
    - revive            # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
#   - rowserrcheck      # checks whether Err of rows is checked successfully
#   - scopelint         # The repository of the linter has been deprecated by the owner. Replaced by exportloopref.
                           # deprecated
#   - sqlclosecheck     # Checks that sql.Rows and sql.Stmt are closed.
    - stylecheck        # Stylecheck is a replacement for golint
#   - tagliatelle       # Checks the struct tags.
                            # is not used - checks the struct tags
#   - tenv              # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testpackage       # linter that makes you use a separate _test package
#   - thelper           # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
                            # is not used - requires to use t.Helper()
#   - tparallel         # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert         # Remove unnecessary type conversions
    - unparam           # Reports unused function parameters
#   - varnamelen        # checks that the length of a variable's name matches its scope
                            # great idea, but too many false positives - checking length of variable's name matches its usage scope
    - wastedassign      # wastedassign finds wasted assignment statements.
    - whitespace        # (auto) Tool for detection of leading and trailing whitespace
#   - wrapcheck         # Checks that errors returned from external packages are wrapped
                            # too strict - requires wrapping errors from external packages (even from the same repo) and interfaces
#   - wsl               # Whitespace Linter - Forces you to use empty lines!
                            # too strict - enforces empty lines at the right places
                        
output:
  uniq-by-line: true # default true
 
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-rules:
    - source: "^//\\s*go:generate\\s"
      linters: lll
    - source: "(noinspection|TODO)"
      linters: godot
    - source: "//noinspection"
      linters: gocritic
    - source: "^\\s+if _, ok := err\\.\\([^.]+\\.InternalError\\); ok {"
      linters: errorlint
    - path: "_test\\.go"
      linters:
        - bodyclose
        - dupl
        - funlen
        - goconst
        - noctx
        - wrapcheck
